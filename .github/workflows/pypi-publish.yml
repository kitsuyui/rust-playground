name: python

on:
  pull_request:
    types: [opened, synchronize, reopened]
  release:
    # "released" events are emitted either when directly be released or be edited from pre-released.
    types: [prereleased, released]

env:
  # Use git tag when release, otherwise use commit hash.
  VERSION: ${{ (github.event_name == 'release' && !github.event.release.prerelease) && github.ref_name || github.sha }}

jobs:
  build:
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.os }}-py${{ matrix.python }}-${{ matrix.rust_target }}
    env:
      POETRY_CACHE_PATH: ${{
        matrix.os == 'ubuntu-latest' && '/home/runner/.cache/pypoetry' ||
        matrix.os == 'macos-latest' && '/Users/runner/Library/Caches/pypoetry' ||
        matrix.os == 'windows-latest' && 'C:\\Users\\runneradmin\\AppData\\Local\\pypoetry' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - python: "3.8"
            os: "ubuntu-latest"
            rust_target: "x86_64-unknown-linux-gnu"
          - python: "3.9"
            os: "ubuntu-latest"
            rust_target: "x86_64-unknown-linux-gnu"
          - python: "3.10"
            os: "ubuntu-latest"
            rust_target: "x86_64-unknown-linux-gnu"
          - python: "3.11"
            os: "ubuntu-latest"
            rust_target: "x86_64-unknown-linux-gnu"
          - python: "3.8"
            os: "macos-latest"
            rust_target: "x86_64-apple-darwin"
          - python: "3.9"
            os: "macos-latest"
            rust_target: "x86_64-apple-darwin"
          - python: "3.10"
            os: "macos-latest"
            rust_target: "x86_64-apple-darwin"
          - python: "3.11"
            os: "macos-latest"
            rust_target: "x86_64-apple-darwin"
          - python: "3.8"
            os: "macos-latest"
            rust_target: "aarch64-apple-darwin"
          - python: "3.9"
            os: "macos-latest"
            rust_target: "aarch64-apple-darwin"
          - python: "3.10"
            os: "macos-latest"
            rust_target: "aarch64-apple-darwin"
          - python: "3.11"
            os: "macos-latest"
            rust_target: "aarch64-apple-darwin"
          - python: "3.8"
            os: "windows-latest"
            rust_target: "x86_64-pc-windows-msvc"
          - python: "3.9"
            os: "windows-latest"
            rust_target: "x86_64-pc-windows-msvc"
          - python: "3.10"
            os: "windows-latest"
            rust_target: "x86_64-pc-windows-msvc"
          - python: "3.11"
            os: "windows-latest"
            rust_target: "x86_64-pc-windows-msvc"

    defaults:
      run:
        working-directory: python
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: "${{ matrix.python }}"

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust_target }}
      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: ${{ matrix.os }}-${{ matrix.rust_target }}-

      - uses: actions/cache@v3
        name: poetry cache
        with:
          path: ${{ env.POETRY_CACHE_PATH }}
          restore-keys: |
            poetry-${{ runner.os }}-${{ matrix.python }}-${{ matrix.rust_target }}-${{ hashFiles('**/poetry.lock') }}
            poetry-${{ runner.os }}-${{ matrix.python }}-${{ matrix.rust_target }}-
            poetry-${{ runner.os }}-${{ matrix.python }}-
          key: poetry-${{ runner.os }}-${{ matrix.python }}-${{ matrix.rust_target }}-${{ hashFiles('**/poetry.lock') }}

      - uses: abatilo/actions-poetry@v2

      - name: Setup a virtual environment
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - uses: actions/cache@v3
        name: python package cache
        with:
          path: ./.venv
          restore-keys: |
            python-venv-${{ runner.os }}-${{ matrix.python }}-${{ matrix.rust_target }}-${{ hashFiles('**/poetry.lock') }}
            python-venv-${{ runner.os }}-${{ matrix.python }}-${{ matrix.rust_target }}-
            python-venv-${{ runner.os }}-${{ matrix.python }}-
          key: python-venv-${{ runner.os }}-${{ matrix.python }}-${{ matrix.rust_target }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install python dependencies
        run: poetry install

      - name: Check Python version
        if: matrix.os != 'windows-latest'
        run: |
          actual_version=$(poetry run python --version)
          expected_version="Python ${{ matrix.python }}"
          if [ "$actual_version" == *"$expected_version"* ]; then
            echo "Expected $expected_version, but got $actual_version"
            exit 1
          fi

      - name: packaging
        run: |
          poetry run maturin build --release --strip --interpreter python${{ matrix.python }} --target ${{ matrix.rust_target }}

      - name: test
        if: matrix.os != 'windows-latest'
        run: |
          rm ../target/wheels/*
          python3 -m venv .venv
          source .venv/bin/activate
          pip install .
          pip install pytest
          pytest tests
          python -c 'from kitsuyui_rust_playground import my_calc; assert my_calc(1, 2, 3) == "9"; print("OK")'
          deactivate

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ env.VERSION }}-${{ matrix.os }}-${{ matrix.python }}-${{ matrix.rust_target }}
          path: target/wheels/
          retention-days: 1

  publish:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-${{ env.VERSION }}-*
          path: target/wheels/

      - name: Publish distribution to GitHub Releases
        if: github.event_name == 'release' && !github.event.release.prerelease
        uses: softprops/action-gh-release@v1
        with:
          files: target/wheels/*

      - name: Publish distribution to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        if: github.event_name == 'release' && github.event.release.prerelease
        with:
          packages-dir: target/wheels/
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository-url: https://test.pypi.org/legacy/

      - name: Publish distribution to PyPI
        if: github.event_name == 'release' && !github.event.release.prerelease
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: target/wheels/
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
