name: Test build Python packages

on: [push]
jobs:
  test_and_build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python: ["3.7", "3.8", "3.9", "3.10", "3.11"]
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        # TODO: arch is not supported yet (arm64, i386, x86_64, ...)
    defaults:
      run:
        working-directory: python
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: "${{ matrix.python }}"

      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - uses: abatilo/actions-poetry@v2

      - name: Cache
        id: cache_poetry_and_rust
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.local/share/virtualenvs
            target/
            !target/wheels
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-pipenv-${{ matrix.python }}-${{ hashFiles('**/poetry.lock') }}

      - if: ${{ steps.cache_poetry_and_rust.outputs.cache-hit != 'true' }}
        name: Install dependencies
        run: |
          poetry install
          cargo install maturin

      - name: Check Python version
        if: matrix.os != 'windows-latest'
        run: |
          actual_version=$(poetry run python --version)
          expected_version="Python ${{ matrix.python }}"
          if [ "$actual_version" == *"$expected_version"* ]; then
            echo "Expected $expected_version, but got $actual_version"
            exit 1
          fi

      - name: packaging linux
        if: matrix.os == 'ubuntu-latest'
        run: poetry run maturin build --release --strip --interpreter python${{ matrix.python }}

      - name: packaging windows
        if: matrix.os == 'windows-latest'
        run: poetry run maturin build --release --strip --interpreter python${{ matrix.python }}

      - name: packaging darwin
        if: matrix.os == 'macos-latest'
        run: |
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin
          poetry run maturin build --release --strip --interpreter python${{ matrix.python }} --target x86_64-apple-darwin
          poetry run maturin build --release --strip --interpreter python${{ matrix.python }} --target aarch64-apple-darwin

      - name: test
        if: matrix.os != 'windows-latest'
        run: |
          rm ../target/wheels/*
          python3 -m venv .venv
          source .venv/bin/activate
          pip install .
          pip install pytest
          pytest tests
          python -c 'from kitsuyui_rust_playground import my_calc; assert my_calc(1, 2, 3) == "9"; print("OK")'
          deactivate

      - uses: actions/upload-artifact@v3
        with:
          name: build_wheels
          path: target/wheels/

  publish:
    needs: test_and_build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: build_wheels
          path: target/wheels/

      - name: Publish distribution to Test PyPI
        uses: pypa/gh-action-pypi-publish@master
        if: github.event_name == 'release' && github.event.release.prerelease
        with:
          packages_dir: target/wheels/
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/

      - name: Publish distribution to PyPI
        if: github.event_name == 'release' && !github.event.release.prerelease
        uses: pypa/gh-action-pypi-publish@master
        with:
          packages_dir: target/wheels/
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
